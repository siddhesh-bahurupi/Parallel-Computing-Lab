//Write a parallel program to search of an element in an array

#include <mpi.h> 
#include <stdio.h> 
#include <stdlib.h> 


#define n 12 

int array[] = {1,2,3,4,5,6,7,8,9,10,11,12};

int element_to_search = -1;

int array_2[1000];

int main(int argc, char* argv[])
{

	int rank, size, elements_per_process, no_elements_recieved;


	MPI_Status status;

	MPI_Init(&argc, &argv);


	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);


	if (rank == 0) {

		int num;
		scanf("%d", &num);
		element_to_search = num;

		int index, i;
		elements_per_process = n / size;

		if (size > 1) {

			for (i = 1; i < size; i++) {
				index = i * elements_per_process;

				MPI_Send(&elements_per_process, 1, MPI_INT, i, 0, MPI_COMM_WORLD);

				MPI_Send(&element_to_search, 1, MPI_INT, i, 1, MPI_COMM_WORLD);

				MPI_Send(&array[index], elements_per_process, MPI_INT, i, 0, MPI_COMM_WORLD);
			}
		}

		int element_index = -1;

		for (i = 0; i < elements_per_process; i++)
			if (element_to_search == array[i]) {
				element_index = i;
			}


		int tmp = 0;
		for (i = 1; i < size; i++) {
			MPI_Recv(&tmp, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
			int sender = status.MPI_SOURCE;
			if (tmp != -1) {
				element_index = tmp;
			}
		}

		if (element_index != -1) {
			printf("\nIndex of %d is : %d\n", element_to_search, element_index);
		}
		else {
			printf("\nThere is no such element in the array \n");
		}
	}
	else {

		MPI_Recv(&no_elements_recieved, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);

		int to_search = 0;
		MPI_Recv(&to_search, 1, MPI_INT, 0, 1, MPI_COMM_WORLD, &status);


		MPI_Recv(&array_2, no_elements_recieved, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);

		int element_index = -1;

		for (int i = 0; i < no_elements_recieved; i++)
			if (to_search == array_2[i]) {
				element_index = rank * no_elements_recieved + i;
			}

		MPI_Send(&element_index, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
	}

	MPI_Finalize();

	return 0;
}